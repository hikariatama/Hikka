#             ‚ñà ‚ñà ‚ñÄ ‚ñà‚ñÑ‚ñÄ ‚ñÑ‚ñÄ‚ñà ‚ñà‚ñÄ‚ñà ‚ñÄ
#             ‚ñà‚ñÄ‚ñà ‚ñà ‚ñà ‚ñà ‚ñà‚ñÄ‚ñà ‚ñà‚ñÄ‚ñÑ ‚ñà
#              ¬© Copyright 2022
#           https://t.me/hikariatama
#
# üîí      Licensed under the GNU AGPLv3
# üåê https://www.gnu.org/licenses/agpl-3.0.html

import asyncio
import datetime
import io
import json
import logging
import time

from telethon.tl.types import Message

from .. import loader, utils
from ..inline.types import BotInlineCall

logger = logging.getLogger(__name__)


@loader.tds
class HikkaBackupMod(loader.Module):
    """Automatic database backup"""

    strings = {
        "name": "HikkaBackup",
        "period": (
            "‚åöÔ∏è <b>Unit ¬´ALPHA¬ª</b> creates database backups periodically. You can"
            " change this behavior later.\n\nPlease, select the periodicity of"
            " automatic database backups"
        ),
        "saved": (
            "‚úÖ Backup period saved. You can re-configure it later with"
            " .set_backup_period"
        ),
        "never": (
            "‚úÖ I will not make automatic backups. You can re-configure it later with"
            " .set_backup_period"
        ),
        "invalid_args": (
            "üö´ <b>Specify correct backup period in hours, or `0` to disable</b>"
        ),
    }

    strings_ru = {
        "period": (
            "‚åöÔ∏è <b>–Æ–Ω–∏—Ç ¬´ALPHA¬ª</b> —Å–æ–∑–¥–∞–µ—Ç —Ä–µ–≥—É–ª—è—Ä–Ω—ã–µ —Ä–µ–∑–µ—Ä–≤–Ω—ã–µ –∫–æ–ø–∏–∏. –≠—Ç–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏"
            " –º–æ–∂–Ω–æ –∏–∑–º–µ–Ω–∏—Ç—å –ø–æ–∑–∂–µ.\n\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –ø–µ—Ä–∏–æ–¥–∏—á–Ω–æ—Å—Ç—å —Ä–µ–∑–µ—Ä–≤–Ω–æ–≥–æ"
            " –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è"
        ),
        "saved": (
            "‚úÖ –ü–µ—Ä–∏–æ–¥–∏—á–Ω–æ—Å—Ç—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞! –ï–µ –º–æ–∂–Ω–æ –∏–∑–º–µ–Ω–∏—Ç—å —Å –ø–æ–º–æ—â—å—é .set_backup_period"
        ),
        "never": (
            "‚úÖ –Ø –Ω–µ –±—É–¥—É –¥–µ–ª–∞—Ç—å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ —Ä–µ–∑–µ—Ä–≤–Ω—ã–µ –∫–æ–ø–∏–∏. –ú–æ–∂–Ω–æ –æ—Ç–º–µ–Ω–∏—Ç—å"
            " –∏—Å–ø–æ–ª—å–∑—É—è .set_backup_period"
        ),
        "invalid_args": (
            "üö´ <b>–£–∫–∞–∂–∏ –ø—Ä–∞–≤–∏–ª—å–Ω—É—é –ø–µ—Ä–∏–æ–¥–∏—á–Ω–æ—Å—Ç—å –≤ —á–∞—Å–∞—Ö, –∏–ª–∏ `0` –¥–ª—è –æ—Ç–∫–ª—é—á–µ–Ω–∏—è</b>"
        ),
    }

    async def client_ready(self):
        if not self.get("period"):
            await self.inline.bot.send_photo(
                self.tg_id,
                photo="https://github.com/hikariatama/assets/raw/master/unit_alpha.png",
                caption=self.strings("period"),
                reply_markup=self.inline.generate_markup(
                    utils.chunks(
                        [
                            {
                                "text": f"üï∞ {i} h",
                                "callback": self._set_backup_period,
                                "args": (i,),
                            }
                            for i in {1, 2, 4, 6, 8, 12, 24, 48, 168}
                        ],
                        3,
                    )
                    + [
                        [
                            {
                                "text": "üö´ Never",
                                "callback": self._set_backup_period,
                                "args": (0,),
                            }
                        ]
                    ]
                ),
            )

        self._backup_channel, _ = await utils.asset_channel(
            self._client,
            "hikka-backups",
            "üìº Your database backups will appear there",
            silent=True,
            archive=True,
            avatar="https://github.com/hikariatama/assets/raw/master/hikka-backups.png",
            _folder="hikka",
        )

        self.handler.start()

    async def _set_backup_period(self, call: BotInlineCall, value: int):
        if not value:
            self.set("period", "disabled")
            await call.answer(self.strings("never"), show_alert=True)
            await call.delete()
            return

        self.set("period", value * 60 * 60)
        self.set("last_backup", round(time.time()))

        await call.answer(self.strings("saved"), show_alert=True)
        await call.delete()

    @loader.command(ru_doc="<–≤—Ä–µ–º—è –≤ —á–∞—Å–∞—Ö> - –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —á–∞—Å—Ç–æ—Ç—É –±—ç–∫–∞–ø–æ–≤")
    async def set_backup_period(self, message: Message):
        """<time in hours> - Change backup frequency"""
        args = utils.get_args_raw(message)
        if not args or not args.isdigit() or int(args) not in range(200):
            await utils.answer(message, self.strings("invalid_args"))
            return

        if not int(args):
            self.set("period", "disabled")
            await utils.answer(message, f"<b>{self.strings('never')}</b>")
            return

        period = int(args) * 60 * 60
        self.set("period", period)
        self.set("last_backup", round(time.time()))
        await utils.answer(message, f"<b>{self.strings('saved')}</b>")

    @loader.loop(interval=1)
    async def handler(self):
        try:
            if not self.get("period"):
                await asyncio.sleep(3)
                return

            if not self.get("last_backup"):
                self.set("last_backup", round(time.time()))
                await asyncio.sleep(self.get("period"))
                return

            if self.get("period") == "disabled":
                raise loader.StopLoop

            await asyncio.sleep(
                self.get("last_backup") + self.get("period") - time.time()
            )

            backup = io.BytesIO(json.dumps(self._db).encode("utf-8"))
            backup.name = f'hikka-db-backup-{getattr(datetime, "datetime", datetime).now().strftime("%d-%m-%Y-%H-%M")}.json'


            await self._client.send_file(self._backup_channel, backup)
            self.set("last_backup", round(time.time()))
        except loader.StopLoop:
            raise
        except Exception:
            logger.exception("HikkaBackup failed")
            await asyncio.sleep(60)
