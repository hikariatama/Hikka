# ¬©Ô∏è –í–∞—à–µ –∏–º—è, 2024
# –≠—Ç–æ —Ñ–∞–π–ª —è–≤–ª—è–µ—Ç—Å—è —á–∞—Å—Ç—å—é Hikka Userbot
# üåê https://github.com/hikariatama/Hikka
# –í—ã –º–æ–∂–µ—Ç–µ —Ä–∞—Å–ø—Ä–æ—Å—Ç—Ä–∞–Ω—è—Ç—å –∏/–∏–ª–∏ –∏–∑–º–µ–Ω—è—Ç—å –µ–≥–æ –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–∏ —Å —É—Å–ª–æ–≤–∏—è–º–∏ GNU AGPLv3
# üîë https://www.gnu.org/licenses/agpl-3.0.html

import git
from hikkatl.tl.types import Message
from hikkatl.utils import get_display_name

from .. import loader, utils, version
from ..inline.types import InlineQuery


@loader.tds
class HikkaExtendedInfoMod(loader.Module):
    """–û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –±–æ—Ç–µ"""

    strings = {"name": "HikkaExtendedInfo"}

    def __init__(self):
        self.config = loader.ModuleConfig(
            loader.ConfigValue(
                "custom_message",
                "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±–æ—Ç–µ:",
                doc=lambda: self.strings("_cfg_cst_msg"),
            ),
            loader.ConfigValue(
                "custom_buttons",
                ["üåê –ü–æ–¥–¥–µ—Ä–∂–∫–∞", "https://t.me/hikka_talks"],
                lambda: self.strings("_cfg_cst_btn"),
                validator=loader.validators.Union(
                    loader.validators.Series(fixed_len=2),
                    loader.validators.NoneType(),
                ),
            ),
            loader.ConfigValue(
                "banner_url",
                "https://0x0.st/XgAX.jpg",
                lambda: self.strings("_cfg_banner"),
                validator=loader.validators.Link(),
            ),
        )

    def _render_info(self) -> str:
        try:
            repo = git.Repo(search_parent_directories=True)
            diff = repo.git.log([f"HEAD..origin/{version.branch}", "--oneline"])
            upd = (
                self.strings("update_required") if diff else self.strings("up-to-date")
            )
        except Exception:
            upd = ""

        me = '<b><a href="tg://user?id={}">{}</a></b>'.format(
            self._client.hikka_me.id,
            utils.escape_html(get_display_name(self._client.hikka_me)),
        )
        _version = f'<i>{".".join(list(map(str, list(version.__version__))))}</i>'
        platform = utils.get_named_platform()

        return (
            f'<b>üåò Hikka</b>\n'
            f'<b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:</b> {me}\n'
            f'<b>–í–µ—Ä—Å–∏—è:</b> {_version}\n'
            f'<b>–ü–ª–∞—Ç—Ñ–æ—Ä–º–∞:</b> {platform}\n'
            f'<b>–°—Ç–∞—Ç—É—Å –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è:</b> {upd}\n'
            f'<b>–í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã:</b> {utils.formatted_uptime()}'
        )

    def _get_buttons(self):
        buttons = []
        if self.config["custom_buttons"]:
            buttons.append({
                "text": self.config["custom_buttons"][0],
                "url": self.config["custom_buttons"][1],
            })
        return buttons

    @loader.inline_handler()
    @loader.inline_everyone
    async def info(self, _: InlineQuery) -> dict:
        """–û—Ç–ø—Ä–∞–≤–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –±–æ—Ç–µ"""

        return {
            "title": self.strings("send_info"),
            "description": "–†–∞—Å—à–∏—Ä–µ–Ω–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±–æ—Ç–µ",
            "photo": self.config["banner_url"],
            "caption": self._render_info(),
            "thumb": "https://github.com/hikariatama/Hikka/raw/master/assets/hikka_pfp.png",
            "reply_markup": {"inline_keyboard": [self._get_buttons()]},
        }

    @loader.command()
    async def infocmd(self, message: Message):
        """–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –±–æ—Ç–µ"""
        await utils.answer(message, self._render_info())

    @loader.command()
    async def setinfo(self, message: Message):
        """–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∫–∞—Å—Ç–æ–º–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ"""
        if not (args := utils.get_args_html(message)):
            return await utils.answer(message, self.strings("setinfo_no_args"))

        self.config["custom_message"] = args
        await utils.answer(message, self.strings("setinfo_success"))

    @loader.command()
    async def addbutton(self, message: Message):
        """–î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—É—é –∫–Ω–æ–ø–∫—É"""
        if not (args := utils.get_args(message)):
            return await utils.answer(message, "–£–∫–∞–∂–∏—Ç–µ —Ç–µ–∫—Å—Ç –∏ —Å—Å—ã–ª–∫—É –∫–Ω–æ–ø–∫–∏.")

        if len(args) < 2:
            return await utils.answer(message, "–¢—Ä–µ–±—É–µ—Ç—Å—è —Ç–µ–∫—Å—Ç –∏ —Å—Å—ã–ª–∫–∞ –¥–ª—è –∫–Ω–æ–ø–∫–∏.")

        button_text, button_url = args[0], args[1]
        self.config["custom_buttons"] = [button_text, button_url]
        await utils.answer(message, "–ö–Ω–æ–ø–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞.")
