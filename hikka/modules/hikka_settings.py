# ‚ñà ‚ñà ‚ñÄ ‚ñà‚ñÑ‚ñÄ ‚ñÑ‚ñÄ‚ñà ‚ñà‚ñÄ‚ñà ‚ñÄ    ‚ñÑ‚ñÄ‚ñà ‚ñÄ‚ñà‚ñÄ ‚ñÑ‚ñÄ‚ñà ‚ñà‚ñÄ‚ñÑ‚ñÄ‚ñà ‚ñÑ‚ñÄ‚ñà
# ‚ñà‚ñÄ‚ñà ‚ñà ‚ñà ‚ñà ‚ñà‚ñÄ‚ñà ‚ñà‚ñÄ‚ñÑ ‚ñà ‚ñÑ  ‚ñà‚ñÄ‚ñà  ‚ñà  ‚ñà‚ñÄ‚ñà ‚ñà ‚ñÄ ‚ñà ‚ñà‚ñÄ‚ñà
#
#              ¬© Copyright 2022
#
#          https://t.me/hikariatama
#
# üîí Licensed under the GNU GPLv3
# üåê https://www.gnu.org/licenses/agpl-3.0.html

# scope: inline

import logging

from telethon.tl.types import Message

from .. import loader, main, utils
from ..inline.types import InlineCall

logger = logging.getLogger(__name__)


@loader.tds
class HikkaSettingsMod(loader.Module):
    """Advanced settings for Hikka Userbot"""

    strings = {
        "name": "HikkaSettings",
        "watchers": "üëÄ <b>Watchers:</b>\n\n<b>{}</b>",
        "mod404": "üö´ <b>Watcher {} not found</b>",
        "disabled": "üëÄ <b>Watcher {} is now <u>disabled</u></b>",
        "enabled": "üëÄ <b>Watcher {} is now <u>enabled</u></b>",
        "args": "üö´ <b>You need to specify watcher name</b>",
        "user_nn": "üî∞ <b>NoNick for this user is now {}</b>",
        "no_cmd": "üî∞ <b>Please, specify command to toggle NoNick for</b>",
        "cmd_nn": "üî∞ <b>NoNick for </b><code>{}</code><b> is now {}</b>",
        "cmd404": "üî∞ <b>Command not found</b>",
        "inline_settings": "‚öôÔ∏è <b>Here you can configure your Hikka settings</b>",
        "confirm_update": "üß≠ <b>Please, confirm that you want to update. Your userbot will be restarted</b>",
        "confirm_restart": "üîÑ <b>Please, confirm that you want to restart</b>",
        "suggest_fs": "‚úÖ Suggest FS for modules",
        "do_not_suggest_fs": "üö´ Suggest FS for modules",
        "use_fs": "‚úÖ Always use FS for modules",
        "do_not_use_fs": "üö´ Always use FS for modules",
        "btn_restart": "üîÑ Restart",
        "btn_update": "üß≠ Update",
        "close_menu": "üòå Close menu",
        "download_btn": "‚úÖ Download via button",
        "no_download_btn": "üö´ Download via button",
        "private_not_allowed": "üö´ <b>This command must be executed in chat</b>",
        "nonick_warning": (
            "Warning! You enabled NoNick with default prefix! "
            "You may get muted in Hikka chats. Change prefix or "
            "disable NoNick!"
        ),
        "reply_required": "üö´ <b>Reply to a message of user, which needs to be added to NoNick</b>",
    }

    strings_ru = {
        "watchers": "üëÄ <b>–°–º–æ—Ç—Ä–∏—Ç–µ–ª–∏:</b>\n\n<b>{}</b>",
        "mod404": "üö´ <b>–°–º–æ—Ç—Ä–∏—Ç–µ–ª—å {} –Ω–µ –Ω–∞–π–¥–µ–Ω</b>",
        "disabled": "üëÄ <b>–°–º–æ—Ç—Ä–∏—Ç–µ–ª—å {} —Ç–µ–ø–µ—Ä—å <u>–≤—ã–∫–ª—é—á–µ–Ω</u></b>",
        "enabled": "üëÄ <b>–°–º–æ—Ç—Ä–∏—Ç–µ–ª—å {} —Ç–µ–ø–µ—Ä—å <u>–≤–∫–ª—é—á–µ–Ω</u></b>",
        "args": "üö´ <b>–£–∫–∞–∂–∏ –∏–º—è —Å–º–æ—Ç—Ä–∏—Ç–µ–ª—è</b>",
        "user_nn": "üî∞ <b>–°–æ—Å—Ç–æ—è–Ω–∏–µ NoNick –¥–ª—è —ç—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {}</b>",
        "no_cmd": "üî∞ <b>–£–∫–∞–∂–∏ –∫–æ–º–∞–Ω–¥—É, –¥–ª—è –∫–æ—Ç–æ—Ä–æ–π –Ω–∞–¥–æ –≤–∫–ª—é—á–∏—Ç—å\\–≤—ã–∫–ª—é—á–∏—Ç—å NoNick</b>",
        "cmd_nn": "üî∞ <b>–°–æ—Å—Ç–æ—è–Ω–∏–µ NoNick –¥–ª—è </b><code>{}</code><b>: {}</b>",
        "cmd404": "üî∞ <b>–ö–æ–º–∞–Ω–¥–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞</b>",
        "inline_settings": "‚öôÔ∏è <b>–ó–¥–µ—Å—å –º–æ–∂–Ω–æ —É–ø—Ä–∞–≤–ª—è—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏ Hikka</b>",
        "confirm_update": "üß≠ <b>–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ. –Æ–∑–µ—Ä–±–æ—Ç –±—É–¥–µ—Ç –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∂–µ–Ω</b>",
        "confirm_restart": "üîÑ <b>–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫—É</b>",
        "suggest_fs": "‚úÖ –ü—Ä–µ–¥–ª–∞–≥–∞—Ç—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –º–æ–¥—É–ª–µ–π",
        "do_not_suggest_fs": "üö´ –ü—Ä–µ–¥–ª–∞–≥–∞—Ç—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –º–æ–¥—É–ª–µ–π",
        "use_fs": "‚úÖ –í—Å–µ–≥–¥–∞ —Å–æ—Ö—Ä–∞–Ω—è—Ç—å –º–æ–¥—É–ª–∏",
        "do_not_use_fs": "üö´ –í—Å–µ–≥–¥–∞ —Å–æ—Ö—Ä–∞–Ω—è—Ç—å –º–æ–¥—É–ª–∏",
        "btn_restart": "üîÑ –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∞",
        "btn_update": "üß≠ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ",
        "close_menu": "üòå –ó–∞–∫—Ä—ã—Ç—å –º–µ–Ω—é",
        "download_btn": "‚úÖ –°–∫–∞—á–∏–≤–∞—Ç—å –∫–Ω–æ–ø–∫–æ–π",
        "no_download_btn": "üö´ –°–∫–∞—á–∏–≤–∞—Ç—å –∫–Ω–æ–ø–∫–æ–π",
        "private_not_allowed": "üö´ <b>–≠—Ç—É –∫–æ–º–∞–Ω–¥—É –Ω—É–∂–Ω–æ –≤—ã–ø–æ–ª–Ω—è—Ç—å –≤ —á–∞—Ç–µ</b>",
        "_cmd_doc_watchers": "–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ —Å–º–æ—Ç—Ä–∏—Ç–µ–ª–µ–π",
        "_cmd_doc_watcherbl": "<–º–æ–¥—É–ª—å> - –í–∫–ª—é—á–∏—Ç—å\\–≤—ã–∫–ª—é—á–∏—Ç—å —Å–º–æ—Ç—Ä–∏—Ç–µ–ª—å –≤ —á–∞—Ç–µ",
        "_cmd_doc_watcher": "<–º–æ–¥—É–ª—å> - –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≥–ª–æ–±–∞–ª—å–Ω—ã–º–∏ –ø—Ä–∞–≤–∏–ª–∞–º–∏ —Å–º–æ—Ç—Ä–∏—Ç–µ–ª—è\n–ê—Ä–≥—É–º–µ–Ω—Ç—ã:\n[-c - —Ç–æ–ª—å–∫–æ –≤ —á–∞—Ç–∞—ä]\n[-p - —Ç–æ–ª—å–∫–æ –≤ –ª—Å]\n[-o - —Ç–æ–ª—å–∫–æ –∏—Å—Ö–æ–¥—è—â–∏–µ]\n[-i - —Ç–æ–ª—å–∫–æ –≤—Ö–æ–¥—è—â–∏–µ]",
        "_cmd_doc_nonickuser": "–†–∞–∑—Ä–µ—à–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –≤—ã–ø–æ–ª–Ω—è—Ç—å –∫–∞–∫—É—é-—Ç–æ –∫–æ–º–∞–Ω–¥—É –±–µ–∑ –Ω–∏–∫–∞",
        "_cmd_doc_nonickcmd": "–†–∞–∑—Ä–µ—à–∏—Ç—å –≤—ã–ø–æ–ª–Ω—è—Ç—å –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—É—é –∫–æ–º–∞–Ω–¥—É –±–µ–∑ –Ω–∏–∫–∞",
        "_cls_doc": "–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ Hikka",
        "nonick_warning": (
            "–í–Ω–∏–º–∞–Ω–∏–µ! –¢—ã –≤–∫–ª—é—á–∏–ª NoNick —Å–æ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–º –ø—Ä–µ—Ñ–∏–∫—Å–æ–º! "
            "–¢–µ–±—è –º–æ–≥—É—Ç –∑–∞–º—å—é—Ç–∏—Ç—å –≤ —á–∞—Ç–∞—Ö Hikka. –ò–∑–º–µ–Ω–∏ –ø—Ä–µ—Ñ–∏–∫—Å –∏–ª–∏ "
            "–æ—Ç–∫–ª—é—á–∏ –≥–ª–æ–±–∞–ª—å–Ω—ã–π NoNick!"
        ),
        "reply_required": "üö´ <b>–û—Ç–≤–µ—Ç—å –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –¥–ª—è –∫–æ—Ç–æ—Ä–æ–≥–æ –Ω—É–∂–Ω–æ –≤–∫–ª—é—á–∏—Ç—å NoNick</b>",
    }

    def get_watchers(self) -> tuple:
        return [
            str(_.__self__.__class__.strings["name"])
            for _ in self.allmodules.watchers
            if _.__self__.__class__.strings is not None
        ], self._db.get(main.__name__, "disabled_watchers", {})

    async def client_ready(self, client, db):
        self._db = db
        self._client = client

    async def watcherscmd(self, message: Message):
        """List current watchers"""
        watchers, disabled_watchers = self.get_watchers()
        watchers = [
            f"‚ôªÔ∏è {_}" for _ in watchers if _ not in list(disabled_watchers.keys())
        ]
        watchers += [f"üí¢ {k} {v}" for k, v in disabled_watchers.items()]
        await utils.answer(
            message, self.strings("watchers").format("\n".join(watchers))
        )

    async def watcherblcmd(self, message: Message):
        """<module> - Toggle watcher in current chat"""
        args = utils.get_args_raw(message)
        if not args:
            return await utils.answer(message, self.strings("args"))

        watchers, disabled_watchers = self.get_watchers()

        if args.lower() not in [_.lower() for _ in watchers]:
            return await utils.answer(message, self.strings("mod404").format(args))

        args = [_ for _ in watchers if _.lower() == args.lower()][0]

        current_bl = [
            v for k, v in disabled_watchers.items() if k.lower() == args.lower()
        ]
        current_bl = current_bl[0] if current_bl else []

        chat = utils.get_chat_id(message)
        if chat not in current_bl:
            if args in disabled_watchers:
                for k, _ in disabled_watchers.items():
                    if k.lower() == args.lower():
                        disabled_watchers[k].append(chat)
                        break
            else:
                disabled_watchers[args] = [chat]

            await utils.answer(
                message,
                self.strings("disabled").format(args) + " <b>in current chat</b>",
            )
        else:
            for k in disabled_watchers.copy():
                if k.lower() == args.lower():
                    disabled_watchers[k].remove(chat)
                    if not disabled_watchers[k]:
                        del disabled_watchers[k]
                    break

            await utils.answer(
                message,
                self.strings("enabled").format(args) + " <b>in current chat</b>",
            )

        self._db.set(main.__name__, "disabled_watchers", disabled_watchers)

    async def watchercmd(self, message: Message):
        """<module> - Toggle global watcher rules
        Args:
        [-c - only in chats]
        [-p - only in pm]
        [-o - only out]
        [-i - only incoming]"""
        args = utils.get_args_raw(message)
        if not args:
            return await utils.answer(message, self.strings("args"))

        chats, pm, out, incoming = False, False, False, False

        if "-c" in args:
            args = args.replace("-c", "").replace("  ", " ").strip()
            chats = True

        if "-p" in args:
            args = args.replace("-p", "").replace("  ", " ").strip()
            pm = True

        if "-o" in args:
            args = args.replace("-o", "").replace("  ", " ").strip()
            out = True

        if "-i" in args:
            args = args.replace("-i", "").replace("  ", " ").strip()
            incoming = True

        if chats and pm:
            pm = False
        if out and incoming:
            incoming = False

        watchers, disabled_watchers = self.get_watchers()

        if args.lower() not in [_.lower() for _ in watchers]:
            return await utils.answer(message, self.strings("mod404").format(args))

        args = [_ for _ in watchers if _.lower() == args.lower()][0]

        if chats or pm or out or incoming:
            disabled_watchers[args] = [
                *(["only_chats"] if chats else []),
                *(["only_pm"] if pm else []),
                *(["out"] if out else []),
                *(["in"] if incoming else []),
            ]
            self._db.set(main.__name__, "disabled_watchers", disabled_watchers)
            await utils.answer(
                message,
                self.strings("enabled").format(args)
                + f" (<code>{disabled_watchers[args]}</code>)",
            )
            return

        if args in disabled_watchers and "*" in disabled_watchers[args]:
            await utils.answer(message, self.strings("enabled").format(args))
            del disabled_watchers[args]
            self._db.set(main.__name__, "disabled_watchers", disabled_watchers)
            return

        disabled_watchers[args] = ["*"]
        self._db.set(main.__name__, "disabled_watchers", disabled_watchers)
        await utils.answer(message, self.strings("disabled").format(args))

    async def nonickusercmd(self, message: Message):
        """Allow no nickname for certain user"""
        reply = await message.get_reply_message()
        if not reply:
            await utils.answer(message, self.strings("reply_required"))
            return

        u = reply.sender_id
        if not isinstance(u, int):
            u = u.user_id

        nn = self._db.get(main.__name__, "nonickusers", [])
        if u not in nn:
            nn += [u]
            nn = list(set(nn))  # skipcq: PTC-W0018
            await utils.answer(message, self.strings("user_nn").format("on"))
        else:
            nn = list(set(nn) - {u})
            await utils.answer(message, self.strings("user_nn").format("off"))

        self._db.set(main.__name__, "nonickusers", nn)

    async def nonickchatcmd(self, message: Message):
        """Allow no nickname in certain chat"""
        if message.is_private:
            await utils.answer(message, self.strings("private_not_allowed"))
            return

        chat = utils.get_chat_id(message)

        nn = self._db.get(main.__name__, "nonickchats", [])
        if chat not in nn:
            nn += [chat]
            nn = list(set(nn))  # skipcq: PTC-W0018
            await utils.answer(
                message,
                self.strings("cmd_nn").format(
                    utils.escape_html((await message.get_chat()).title),
                    "on",
                ),
            )
        else:
            nn = list(set(nn) - {chat})
            await utils.answer(
                message,
                self.strings("cmd_nn").format(
                    utils.escape_html((await message.get_chat()).title),
                    "off",
                ),
            )

        self._db.set(main.__name__, "nonickchats", nn)

    async def nonickcmdcmd(self, message: Message):
        """Allow certain command to be executed without nickname"""
        args = utils.get_args_raw(message)
        if not args:
            return await utils.answer(message, self.strings("no_cmd"))

        if args not in self.allmodules.commands:
            return await utils.answer(message, self.strings("cmd404"))

        nn = self._db.get(main.__name__, "nonickcmds", [])
        if args not in nn:
            nn += [args]
            nn = list(set(nn))
            await utils.answer(
                message,
                self.strings("cmd_nn").format(
                    self._db.get(main.__name__, "command_prefix", ".") + args, "on"
                ),
            )
        else:
            nn = list(set(nn) - {args})
            await utils.answer(
                message,
                self.strings("cmd_nn").format(
                    self._db.get(main.__name__, "command_prefix", ".") + args,
                    "off",
                ),
            )

        self._db.set(main.__name__, "nonickcmds", nn)

    async def inline__setting(self, call: InlineCall, key: str, state: bool):
        self._db.set(main.__name__, key, state)

        if (
            key == "no_nickname"
            and state
            and self._db.get(main.__name__, "command_prefix", ".") == "."
        ):
            await call.answer(
                self.strings("nonick_warning"),
                show_alert=True,
            )
        else:
            await call.answer("Configuration value saved!")

        await call.edit(
            self.strings("inline_settings"),
            reply_markup=self._get_settings_markup(),
        )

    async def inline__close(self, call: InlineCall):
        await call.delete()

    async def inline__update(
        self,
        call: InlineCall,
        confirm_required: bool = False,
    ):
        if confirm_required:
            await call.edit(
                self.strings("confirm_update"),
                reply_markup=[
                    {"text": "ü™Ç Update", "callback": self.inline__update},
                    {"text": "üö´ Cancel", "callback": self.inline__close},
                ],
            )
            return

        await call.answer("You userbot is being updated...", show_alert=True)
        await call.delete()
        m = await self._client.send_message("me", f"{self.get_prefix()}update --force")
        await self.allmodules.commands["update"](m)

    async def inline__restart(
        self,
        call: InlineCall,
        confirm_required: bool = False,
    ):
        if confirm_required:
            await call.edit(
                self.strings("confirm_restart"),
                reply_markup=[
                    {"text": "üîÑ Restart", "callback": self.inline__restart},
                    {"text": "üö´ Cancel", "callback": self.inline__close},
                ],
            )
            return

        await call.answer("You userbot is being restarted...", show_alert=True)
        await call.delete()
        m = await self._client.send_message("me", f"{self.get_prefix()}restart --force")
        await self.allmodules.commands["restart"](m)

    def _get_settings_markup(self) -> list:
        return [
            [
                (
                    {
                        "text": "‚úÖ NoNick",
                        "callback": self.inline__setting,
                        "args": (
                            "no_nickname",
                            False,
                        ),
                    }
                    if self._db.get(main.__name__, "no_nickname", False)
                    else {
                        "text": "üö´ NoNick",
                        "callback": self.inline__setting,
                        "args": (
                            "no_nickname",
                            True,
                        ),
                    }
                ),
                (
                    {
                        "text": "‚úÖ Grep",
                        "callback": self.inline__setting,
                        "args": (
                            "grep",
                            False,
                        ),
                    }
                    if self._db.get(main.__name__, "grep", False)
                    else {
                        "text": "üö´ Grep",
                        "callback": self.inline__setting,
                        "args": (
                            "grep",
                            True,
                        ),
                    }
                ),
                (
                    {
                        "text": "‚úÖ InlineLogs",
                        "callback": self.inline__setting,
                        "args": (
                            "inlinelogs",
                            False,
                        ),
                    }
                    if self._db.get(main.__name__, "inlinelogs", True)
                    else {
                        "text": "üö´ InlineLogs",
                        "callback": self.inline__setting,
                        "args": (
                            "inlinelogs",
                            True,
                        ),
                    }
                ),
            ],
            [
                {
                    "text": self.strings("do_not_suggest_fs"),
                    "callback": self.inline__setting,
                    "args": (
                        "disable_modules_fs",
                        False,
                    ),
                }
                if self._db.get(main.__name__, "disable_modules_fs", False)
                else {
                    "text": self.strings("suggest_fs"),
                    "callback": self.inline__setting,
                    "args": (
                        "disable_modules_fs",
                        True,
                    ),
                }
            ],
            [
                (
                    {
                        "text": self.strings("use_fs"),
                        "callback": self.inline__setting,
                        "args": (
                            "permanent_modules_fs",
                            False,
                        ),
                    }
                    if self._db.get(main.__name__, "permanent_modules_fs", False)
                    else {
                        "text": self.strings("do_not_use_fs"),
                        "callback": self.inline__setting,
                        "args": (
                            "permanent_modules_fs",
                            True,
                        ),
                    }
                ),
            ],
            [
                (
                    {
                        "text": self.strings("download_btn"),
                        "callback": self.inline__setting,
                        "args": (
                            "use_dl_btn",
                            False,
                        ),
                    }
                    if self._db.get(main.__name__, "use_dl_btn", True)
                    else {
                        "text": self.strings("no_download_btn"),
                        "callback": self.inline__setting,
                        "args": (
                            "use_dl_btn",
                            True,
                        ),
                    }
                ),
            ],
            [
                {
                    "text": self.strings("btn_restart"),
                    "callback": self.inline__restart,
                    "args": (True,),
                },
                {
                    "text": self.strings("btn_update"),
                    "callback": self.inline__update,
                    "args": (True,),
                },
            ],
            [{"text": self.strings("close_menu"), "callback": self.inline__close}],
        ]

    @loader.owner
    async def settingscmd(self, message: Message):
        """Show settings menu"""
        await self.inline.form(
            self.strings("inline_settings"),
            message=message,
            reply_markup=self._get_settings_markup(),
        )
